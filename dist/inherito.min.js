'use strict';

var inHerito = (function () {

	'use strict';

	var

	/** 
  * @private 
  * Log object if object has debug set to true
 */
	logObject = function logObject(instance) {
		Object.defineProperty(instance, 'debug', { writable: false, enumerable: false });
		console.dir(instance);
	},
	   

	/** 
  * @private 
  * Merge parent's props into instance if indicated otherwise inherit all by default in JS manner
 */
	inherit = function inherit(instance, superProps) {
		// Internal calls are inaccessible
		var mixins = instance.inherit,
		    inheritedObject = {};

		// just assign that one prop
		mixins.map(function (currentValue) {
			inheritedObject[currentValue] = superProps[currentValue];
			return Object.setPrototypeOf(instance, inheritedObject);
		});
		Object.defineProperty(instance, 'inherit', { writable: false, enumerable: false });
	},
	   

	/** 
  * @private
  * Render object to DOM if specified in object creation
  * Prototype, do not use for production yet
 */
	render = function render(instance) {
		if (instance.view) {
			var view = instance.view;
			view.template.src = view.imageUrl;
			view.parent.querySelector(view.context).appendChild(view.template);
		} else {
			console.error('instance does not have a view');
		}
	},
	   

	/**
  * @public
  * Create object instance and log or render if true
 */
	createObject = function createObject() {
		var instance = Object.create(this),
		    superProps = this;

		// set only the new properties

		for (var _len = arguments.length, options = Array(_len), _key = 0; _key < _len; _key++) {
			options[_key] = arguments[_key];
		}

		options.map(function (currentValue) {
			Object.assign(instance, currentValue);
		});

		// options if provided
		instance['view'] ? render(instance) : false;
		Array.isArray(instance['inherit']) ? inherit(instance, superProps) : false;
		instance['debug'] ? logObject(instance) : false;

		return instance;
	};

	// public api
	return {
		create: createObject
	};
})();
//# sourceMappingURL=inherito.min.js.map
